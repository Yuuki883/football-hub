generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  name              String?
  hashedPassword    String?
  image             String?
  provider          String?
  providerAccountId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  role              Role             @default(USER)
  favoriteLeagues   FavoriteLeague[]
  favoriteTeams     FavoriteTeam[]

  @@index([email])
  @@map("users")
}

model FavoriteTeam {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@map("favorite_teams")
}

model FavoriteLeague {
  id        String   @id @default(cuid())
  userId    String
  leagueId  String
  createdAt DateTime @default(now())
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@index([userId])
  @@index([leagueId])
  @@map("favorite_leagues")
}

model League {
  id         String           @id @default(cuid())
  apiId      Int              @unique
  name       String
  country    String
  logo       String?
  slug       String           @unique
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  favoriteBy FavoriteLeague[]
  matches    Match[]
  standings  Standing[]
  teams      Team[]

  @@index([country])
  @@index([slug])
  @@map("leagues")
}

model Team {
  id          String         @id @default(cuid())
  apiId       Int            @unique
  name        String
  shortName   String?
  country     String?
  createdAt   DateTime       @default(now())
  leagueId    String
  logo        String?
  updatedAt   DateTime       @updatedAt
  favoriteBy  FavoriteTeam[]
  awayMatches Match[]        @relation("AwayTeam")
  homeMatches Match[]        @relation("HomeTeam")
  players     Player[]
  standings   Standing[]
  league      League         @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@index([leagueId])
  @@index([name])
  @@map("teams")
}

model Player {
  id          String    @id @default(cuid())
  apiId       Int       @unique
  name        String
  position    String?
  nationality String?
  teamId      String
  birthDate   DateTime?
  createdAt   DateTime  @default(now())
  photo       String?
  updatedAt   DateTime  @updatedAt
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([name])
  @@map("players")
}

model Match {
  id         String      @id @default(cuid())
  apiId      Int         @unique
  homeTeamId String
  awayTeamId String
  homeScore  Int?
  awayScore  Int?
  status     MatchStatus @default(SCHEDULED)
  createdAt  DateTime    @default(now())
  date       DateTime
  leagueId   String
  updatedAt  DateTime    @updatedAt
  awayTeam   Team        @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: Cascade)
  homeTeam   Team        @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: Cascade)
  league     League      @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@index([date])
  @@index([status])
  @@index([leagueId])
  @@index([homeTeamId])
  @@index([awayTeamId])
  @@map("matches")
}

model Standing {
  id             String   @id @default(cuid())
  teamId         String
  position       Int
  points         Int
  won            Int
  draw           Int
  lost           Int
  goalsFor       Int
  goalsAgainst   Int
  goalDifference Int
  leagueId       String
  played         Int
  season         String
  updatedAt      DateTime @updatedAt
  league         League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  team           Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([leagueId, teamId, season])
  @@index([leagueId])
  @@index([teamId])
  @@index([season])
  @@map("standings")
}

model ApiCache {
  id        String   @id
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("api_cache")
}

enum Role {
  USER
  ADMIN
}

enum MatchStatus {
  SCHEDULED
  LIVE
  IN_PLAY
  PAUSED
  FINISHED
  POSTPONED
  SUSPENDED
  CANCELED
}
